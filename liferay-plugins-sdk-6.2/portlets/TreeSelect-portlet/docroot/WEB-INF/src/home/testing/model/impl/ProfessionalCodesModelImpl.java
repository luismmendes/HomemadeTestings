/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package home.testing.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import home.testing.model.ProfessionalCodes;
import home.testing.model.ProfessionalCodesModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ProfessionalCodes service. Represents a row in the &quot;IEFP_ProfessionalCodes&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link home.testing.model.ProfessionalCodesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProfessionalCodesImpl}.
 * </p>
 *
 * @author LMendes
 * @see ProfessionalCodesImpl
 * @see home.testing.model.ProfessionalCodes
 * @see home.testing.model.ProfessionalCodesModel
 * @generated
 */
public class ProfessionalCodesModelImpl extends BaseModelImpl<ProfessionalCodes>
	implements ProfessionalCodesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a professional codes model instance should use the {@link home.testing.model.ProfessionalCodes} interface instead.
	 */
	public static final String TABLE_NAME = "IEFP_ProfessionalCodes";
	public static final Object[][] TABLE_COLUMNS = {
			{ "professionalCodesId", Types.INTEGER },
			{ "level", Types.INTEGER },
			{ "code_", Types.VARCHAR },
			{ "designation", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table IEFP_ProfessionalCodes (professionalCodesId INTEGER not null primary key,level INTEGER,code_ VARCHAR(75) null,designation VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table IEFP_ProfessionalCodes";
	public static final String ORDER_BY_JPQL = " ORDER BY professionalCodes.professionalCodesId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY IEFP_ProfessionalCodes.professionalCodesId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.home.testing.model.ProfessionalCodes"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.home.testing.model.ProfessionalCodes"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.home.testing.model.ProfessionalCodes"));

	public ProfessionalCodesModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _professionalCodesId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setProfessionalCodesId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _professionalCodesId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProfessionalCodes.class;
	}

	@Override
	public String getModelClassName() {
		return ProfessionalCodes.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("professionalCodesId", getProfessionalCodesId());
		attributes.put("level", getLevel());
		attributes.put("code", getCode());
		attributes.put("designation", getDesignation());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer professionalCodesId = (Integer)attributes.get(
				"professionalCodesId");

		if (professionalCodesId != null) {
			setProfessionalCodesId(professionalCodesId);
		}

		Integer level = (Integer)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String designation = (String)attributes.get("designation");

		if (designation != null) {
			setDesignation(designation);
		}
	}

	@Override
	public int getProfessionalCodesId() {
		return _professionalCodesId;
	}

	@Override
	public void setProfessionalCodesId(int professionalCodesId) {
		_professionalCodesId = professionalCodesId;
	}

	@Override
	public int getLevel() {
		return _level;
	}

	@Override
	public void setLevel(int level) {
		_level = level;
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_code = code;
	}

	@Override
	public String getDesignation() {
		if (_designation == null) {
			return StringPool.BLANK;
		}
		else {
			return _designation;
		}
	}

	@Override
	public void setDesignation(String designation) {
		_designation = designation;
	}

	@Override
	public ProfessionalCodes toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProfessionalCodes)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProfessionalCodesImpl professionalCodesImpl = new ProfessionalCodesImpl();

		professionalCodesImpl.setProfessionalCodesId(getProfessionalCodesId());
		professionalCodesImpl.setLevel(getLevel());
		professionalCodesImpl.setCode(getCode());
		professionalCodesImpl.setDesignation(getDesignation());

		professionalCodesImpl.resetOriginalValues();

		return professionalCodesImpl;
	}

	@Override
	public int compareTo(ProfessionalCodes professionalCodes) {
		int primaryKey = professionalCodes.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProfessionalCodes)) {
			return false;
		}

		ProfessionalCodes professionalCodes = (ProfessionalCodes)obj;

		int primaryKey = professionalCodes.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ProfessionalCodes> toCacheModel() {
		ProfessionalCodesCacheModel professionalCodesCacheModel = new ProfessionalCodesCacheModel();

		professionalCodesCacheModel.professionalCodesId = getProfessionalCodesId();

		professionalCodesCacheModel.level = getLevel();

		professionalCodesCacheModel.code = getCode();

		String code = professionalCodesCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			professionalCodesCacheModel.code = null;
		}

		professionalCodesCacheModel.designation = getDesignation();

		String designation = professionalCodesCacheModel.designation;

		if ((designation != null) && (designation.length() == 0)) {
			professionalCodesCacheModel.designation = null;
		}

		return professionalCodesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{professionalCodesId=");
		sb.append(getProfessionalCodesId());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", designation=");
		sb.append(getDesignation());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("home.testing.model.ProfessionalCodes");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>professionalCodesId</column-name><column-value><![CDATA[");
		sb.append(getProfessionalCodesId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designation</column-name><column-value><![CDATA[");
		sb.append(getDesignation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ProfessionalCodes.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ProfessionalCodes.class
		};
	private int _professionalCodesId;
	private int _level;
	private String _code;
	private String _designation;
	private ProfessionalCodes _escapedModel;
}